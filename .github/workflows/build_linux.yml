name: Linux build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        config-options:
          - "--soc=BCM2835 --driver=RPi"
          - "--soc=BCM2836 --driver=RPi"
          - "--soc=BCM2835 --driver=wiringPi"
          - "--driver=SPIDEV"
          - "--driver=MRAA"

    env:
      CFLAGS: "-I /usr/local/include"

    steps:
      - uses: actions/checkout@v1

      - name: provide toolchain
        run: |
          sudo apt-get update
          sudo apt-get install binutils-arm-linux-gnueabi gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          arm-linux-gnueabihf-gcc -v
          arm-linux-gnueabihf-g++ -v

      - name: provide WiringPi
        if: ${{ matrix.config-options == '--soc=BCM2835 --driver=wiringPi' }}
        run: |
          git clone https://github.com/WiringPi/WiringPi
          cd WiringPi/wiringPi
          CC="arm-linux-gnueabihf-gcc -marm -mtune=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard" V=1 make -j5
          sudo make install

      - name: provide MRAA
        if: ${{ matrix.config-options == '--driver=MRAA' }}
        env:
          CC: /usr/bin/arm-linux-gnueabihf-gcc
          CXX: /usr/bin/arm-linux-gnueabihf-g++
        run: |
          git clone https://github.com/intel-iot-devkit/mraa.git
          cd mraa
          mkdir build
          cd build
          cmake .. -D BUILDSWIGNODE=OFF -D BUILDARCH=arm
          sudo make install
          sudo bash -c 'echo "/usr/local/lib/arm-linux-gnueabihf" >> /etc/ld.so.conf'
          sudo ldconfig

      - name: library configure
        run: ./configure ${{ matrix.config-options }}

      - name: library make
        run: make

      - name: library make install
        run: sudo make install

      - name: make linux examples
        # compiling examples for wiringPi is broken see issue #669
        # executables linked to wiringPi additionally need to be linked to crypt and shm_open
        # interruptConfigure.cpp example is incompatible with MRAA & wiringPi drivers
        if: ${{ matrix.config-options != '--soc=BCM2835 --driver=wiringPi' && matrix.config-options != '--driver=MRAA' }}
        run: |
          cd examples_linux
          make
          file ./gettingstarted

      - name: create alias symlink to libboost_python3*.so
        run: sudo ln -s $(ls /usr/lib/$(ls /usr/lib/gcc | tail -1)/libboost_python3*.so | tail -1) /usr/lib/$(ls /usr/lib/gcc | tail -1)/libboost_python3.so

      - name: build python wrapper
        working-directory: ${{ github.workspace }}/pyRF24
        run: sudo python3 setup.py build

      - name: install python wrapper
        working-directory: ${{ github.workspace }}/pyRF24
        run: sudo python3 setup.py install


  ####################### using CMake ################################
  using_cmake:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        toolchain:
          - "arm"
          - "default"
        driver:
          - "RPi"
          - "SPIDEV"
          - "wiringPi"
          - "MRAA"

    steps:
      - uses: actions/checkout@v1

      - name: provide toolchain arm
        if: ${{ matrix.toolchain == 'arm' }}
        run: |
          sudo apt-get update
          sudo apt-get install binutils-arm-linux-gnueabi gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: provide MRAA
        if: ${{ matrix.driver == 'MRAA' && matrix.toolchain != 'arm'  }}
        run: |
          git clone https://github.com/intel-iot-devkit/mraa.git
          cd mraa
          mkdir build
          cd build
          cmake .. -D BUILDSWIGNODE=OFF -D BUILDARCH=arm
          sudo make install

      - name: provide MRAA (for arm toolchain)
        if: ${{ matrix.driver == 'MRAA' && matrix.toolchain == 'arm'  }}
        env:
          CC: /usr/bin/arm-linux-gnueabihf-gcc
          CXX: /usr/bin/arm-linux-gnueabihf-g++
          CFLAGS: "-I /usr/local/include"
        run: |
          git clone https://github.com/intel-iot-devkit/mraa.git
          cd mraa
          mkdir build
          cd build
          cmake .. -D BUILDSWIGNODE=OFF
          sudo make install
          sudo bash -c 'echo "/usr/local/lib/arm-linux-gnueabihf" >> /etc/ld.so.conf'
          sudo ldconfig

      - name: provide WiringPi
        if: ${{ matrix.driver == 'wiringPi' && matrix.toolchain != 'arm' }}
        run: |
          git clone https://github.com/WiringPi/WiringPi
          cd WiringPi
          ./build

      - name: provide WiringPi (for arm toolchain)
        if: ${{ matrix.driver == 'wiringPi' && matrix.toolchain == 'arm' }}
        env:
          CC: /usr/bin/arm-linux-gnueabihf-gcc
          CFLAGS: "-I /usr/local/include"
        run: |
          git clone https://github.com/WiringPi/WiringPi
          cd WiringPi
          ./build

      - name: create CMake build environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: configure lib
        working-directory: ${{ github.workspace }}/build
        run: cmake .. -D CMAKE_BUILD_TYPE=$BUILD_TYPE -D RF24_DRIVER=${{ matrix.driver }} -D CMAKE_TOOLCHAIN_FILE=cmake/toolchains/${{ matrix.toolchain }}.cmake

      - name: build lib
        working-directory: ${{ github.workspace }}/build
        run: cmake --build .

      - name: install lib
        working-directory: ${{ github.workspace }}/build
        run: sudo cmake --install .

      - name: package lib
        working-directory: ${{ github.workspace }}/build
        run: sudo cpack

      - name: Save artifact
        uses: actions/upload-artifact@v2
        with:
          name: "deb_pkg_RF24"
          path: ${{ github.workspace }}/build/*.deb

      - name: clean build environment
        working-directory: ${{ github.workspace }}/build
        run: sudo rm -r ./*

      - name: configure examples
        working-directory: ${{ github.workspace }}/build
        # interruptConfigure isn't compatible with RF24 lib's support of MRAA as a driver
        # interruptConfigure uses `attachInterrupt()` instead of wiringPi's `waitFor/interrupt()`
        # executables linked to wiringPi additionally need to be linked to crypt and shm_open
        run: cmake ../examples_linux -DRF24_DRIVER=${{ matrix.driver }} -D CMAKE_TOOLCHAIN_FILE=cmake/toolchains/${{ matrix.toolchain }}.cmake

      - name: build examples
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build .
          file ./gettingstarted

      - name: provide python wrapper prerequisites
        # python3-rpi.gpio is only required for physical hardware
        run: sudo apt-get install python3-dev libboost-python-dev python3-setuptools

      - name: create alias symlink to libboost_python3*.so
        run: sudo ln -s $(ls /usr/lib/$(ls /usr/lib/gcc | tail -1)/libboost_python3*.so | tail -1) /usr/lib/$(ls /usr/lib/gcc | tail -1)/libboost_python3.so

      - name: build python wrapper
        working-directory: ${{ github.workspace }}/pyRF24
        run: sudo python3 setup.py build

      - name: install python wrapper
        working-directory: ${{ github.workspace }}/pyRF24
        run: sudo python3 setup.py install
