# Check if we are building a pico-sdk based project
# (or more exactly: if we just got included in a pico-sdk based project)
if (PICO_SDK_PATH)
    # If so, load the relevant CMakeLists-file but don't do anything else
    include(${CMAKE_CURRENT_LIST_DIR}/utility/rp2/CMakeLists.txt)
    return()
endif()

cmake_minimum_required(VERSION 3.15)

# Set the project name to your project name, my project isn't very descriptive
project(nRF24 CXX)
include(cmake/StandardProjectSettings.cmake)
include(cmake/PreventInSourceBuilds.cmake)

# Link this 'library' to set the c++ standard / compile-time options requested
add_library(project_options INTERFACE)
target_compile_features(project_options INTERFACE cxx_std_17)

if(CMAKE_CXX_COMPILER_ID MATCHES ".*Clang")
    option(ENABLE_BUILD_WITH_TIME_TRACE "Enable -ftime-trace to generate time tracing .json files on clang" OFF)
    if(ENABLE_BUILD_WITH_TIME_TRACE)
        add_compile_definitions(project_options INTERFACE -ftime-trace)
    endif()
endif()

# Link this 'library' to use the warnings specified in CompilerWarnings.cmake
add_library(project_warnings INTERFACE)

# enable cache system
include(cmake/Cache.cmake)

# standard compiler warnings
include(cmake/CompilerWarnings.cmake)
set_project_warnings(project_warnings)

# sanitizer options if supported by compiler
include(cmake/Sanitizers.cmake)
enable_sanitizers(project_options)

# enable doxygen
include(cmake/Doxygen.cmake)
enable_doxygen()

# allow for static analysis options
include(cmake/StaticAnalyzers.cmake)

option(BUILD_SHARED_LIBS "Enable compilation of shared libraries" OFF)
option(ENABLE_TESTING "Enable Test Builds" OFF)
option(ENABLE_FUZZING "Enable Fuzzing Builds" OFF)

if(ENABLE_TESTING)
    enable_testing()
    message("Building Tests.")
    add_subdirectory(test)
endif()

if(ENABLE_FUZZING)
    message("Building Fuzz Tests, using fuzzing sanitizer https://www.llvm.org/docs/LibFuzzer.html")
    add_subdirectory(fuzz_test)
endif()

# set a variable to reuse the target name
set(LibTargetName rf24) # this var is used in the GetLibVersion.cmake module

# get library version number (major, minor, patch) from Arduino IDE's required library.properties file
include(cmake/GetLibVersion.cmake)
message("RF24 library version: ${${LibTargetName}_VERSION_STRING}")

#####################################
### Now we actually build the library
######################################
include (cmake/copy_includes.cmake)

add_library(${LibTargetName} SHARED RF24.cpp)
set_target_properties(
    ${LibTargetName}
    PROPERTIES
    SOVERSION ${${LibTargetName}_VERSION_MAJOR}
    VERSION ${${LibTargetName}_VERSION_STRING}
    )

target_include_directories(${LibTargetName} PUBLIC utility/)
add_subdirectory(utility)

target_link_libraries(${LibTargetName}
    INTERFACE
        rf24DriverUtility
        project_options
        project_warnings
    )
